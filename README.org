#+Title: Common envelope initiated by the secondaries
#+author: [[mailto:mrenzo@flatironinstitute.org][Mathieu Renzo]]

#+BEGIN_html
<p align="center">
<a href="https://github.com/showyourwork/showyourwork">
<img width = "450" src="https://raw.githubusercontent.com/showyourwork/.github/main/images/showyourwork.png" alt="showyourwork"/>
</a>
<br>
<br>
<a href="https://github.com/mathren/CE_accretors/actions/workflows/build.yml">
<img src="https://github.com/mathren/CE_accretors/actions/workflows/build.yml/badge.svg?branch=main" alt="Article status"/>
</a>
<a href="https://github.com/mathren/CE_accretors/raw/main-pdf/arxiv.tar.gz">
<img src="https://img.shields.io/badge/article-tarball-blue.svg?style=flat" alt="Article tarball"/>
</a>
<a href="https://github.com/mathren/CE_accretors/raw/main-pdf/CE_accretors.pdf">
<img src="https://img.shields.io/badge/article-pdf-blue.svg?style=flat" alt="Read the article"/>
</a>
</p>
#+END_html

** Why care about the first mass transfer on future common envelope?

   Most binary evolution scenarios for gravitational wave sources rely
   on a common envelope (CE) to reduce the separation (exceptions are
   chemically homogeneous evolution and stable mass transfer
   channels). The CE is initiated by a star that has previously
   accreted mass during a stable Roche lobe overflow (RLOF) phase.

   We want to study how the previous accretion through RLOF influences
   the radial evolution and the binding energy of the accretor star.
   This may be different from single stars, because accretion of
   matter from a companion leads to increase of the convective core
   mass, rejuvenation, and changes in the density, temperature,
   entropy, and composition of the star and ultimately its binding
   energy profile.

   Our result broadly indicate that having accreted mass during the
   main sequence leads to evolved stars with overall less bound
   envelopes that might be easier to eject. For more info, click on
   the article pdf badge above.

** Structure of the repository

   This follows the structure prescribed by [[https://github.com/showyourwork/showyourwork][showyourwork]].

*** =src/tex= LaTeX files for the paper

    The figures =pdf= are not saved in the git repo, instead they are
    generated by =showyourwork=.

*** =src/scripts= python scripts for the paper

    Contains the scripts and libraries used for the analysis and to
    make the figures in the paper

*** =src/data/=

    When running =showyourwork= locally, the data will be downloaded
    from zenodo and saved in a subfolder =MESA_output=, which the
    python scripts expect to exist before they can run.


**** =src/data/MESA_input=

     The subfolders here contain template MESA work directory used to
     run our models. Tarball containing the exact template used for
     the models in the paper are also uploaded on [[https://sandbox.zenodo.org/deposit/1069400][zenodo SANDBOX
     1069400]].

     This project uses =MESA version 15140=, =MESA SDK
     x86_64-linux-20.12.1= (also logged in the =*.data= files), which
     includes the compiler:

     #+BEGIN_SRC bash
     gfortran --version
     GNU Fortran (GCC) 10.2.0
     #+END_SRC

     Please refer to the [[https://docs.mesastar.org/en/latest/][MESA documentation]] and [[https://lists.mesastar.org/mailman/listinfo][mailing list]] for
     support.

** Local compilation

   Assuming you have a working installation of conda, you can [[https://show-your.work/en/latest/install/][install
   showyourwork]], clone this repository, and just run =showyourwork= and
   it should work:

#+BEGIN_SRC bash
  pip install -U showyourwork
  git clone git@github.com:mathren/CE_accretors.git
  showyourwork
#+END_SRC

   The first time it will download the data (1.1 Gb) and process them,
   which may take a very long while (~30min on my workstation
   excluding the time to download):

#+BEGIN_SRC bash
  > time showyourwork
  [...]
  real    30m13.209s
  user    27m9.104s
  sys     0m59.076s
#+END_SRC

  After the data exist cached on your machine, this will be much
  faster (how much depends on what has changed in the repo that needs
  to be redone).

  You can alo see the source in =src/tex/CE_accretors.tex=, which you
  can edit and should be able to compile locally. If you have never
  ran =showyourwork= locally, then the figures will be missing on your
  machine (but you can still compile using the =draft= option). If you
  have ever ran =showyourwork= you will have a (possibly outdated)
  version of the figures locally, and you can compile the =tex= as you
  would usually.

** Migration to new showyourwork

*** DONE Simple test
    The scripts =convert_MESA_output.py= should create  =src/data/try.npy=.
    =zenodo_plotter.py= reads it and creates a figure.
*** DONE downloading tarball and converting
*** DONE cleanup figures

    - [X] Refactor scripts in =/src/figures/=.
    - [X] change =graphicspath= in =CE_accretors.tex.=
    - [X] Remove figures from repo

*** DONE caching of intermediate results

    - [X] modify Snakemake file to have caching
    - [X] modify dependencies in =showyourwork.yml=
    - [X] modify tex file to include figure

*** TODO browsable folders on zenodo

    - [ ] right now the cache on [[https://sandbox.zenodo.org/deposit/1071935][zenodo sandbox]] re-uploads a megafolder

*** Issues to report on =showyourwork=

***** =./showyourwork/cache/= becomes pretty huge pretty fast: clean-up?

** TODO list

  - [X] add =*.mod= files, inlists, and src to static dataset (17GB)
  - [ ] move static dataset to zenodo (now sandbox)
  - [ ] update =showyourwork.yml= with zenodo link (not sandbox)
  - [ ] check C shell burning convective behavior
  - [ ] annotate HRD
